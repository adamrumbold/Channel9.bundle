
def MetadataObjectForURL(url):
    
    data = JSON.ObjectFromURL(url)
    title = data['name']
    summary = data['shortDescription']
    thumb = data['thumbnailURL']
    duration = data['length']
    originally_available_at = Datetime.FromTimestamp(int(data['publishedDate'])/1000)
    
    return VideoClipObject(
        title=title,
        summary=summary,
        thumb=thumb,
        duration=duration,
        originally_available_at=originally_available_at,
    )


def MediaObjectsForURL(url):
    
    container = Container.MP4
    video_codec = VideoCodec.H264
    audio_codec = AudioCodec.AAC
    audio_channels = 2

    return [
        MediaObject(
            protocol='http',
            container = container,
            video_codec = video_codec,
            audio_codec = audio_codec,
            video_resolution='576',
            audio_channels=2,
            parts=[PartObject(key=Callback(PlayVideo, url=url))],
        ),
    ]

def PlayVideo(url):
    
    data = JSON.ObjectFromURL(url)
    flvURL = data['FLVURL']
    Log('Attempting to play: ' + data['FLVURL'])
    RE_RTMP = Regex('^rtmp://')
    isRTMP = RE_RTMP.search(flvURL)
    if isRTMP is None:
        return flvURL
    else:
    
        RE_CLIP = Regex('^rtmp://vod\.netshow\.ninemsn\.com\.au/ondemand/(.*)$')
        RE_RTMP = Regex('^rtmp://.*/ondemand/')
        Clip = RE_CLIP.search(flvURL).group(1)
        Rtmp = RE_RTMP.search(flvURL).group(0)
        Log('Got RTMP: ' + Rtmp)
        Log('Got Clip: ' + Clip)
        #rtmpVid = RTMPVideoURL(url=rtmpURL, clip=CLIP + video_url, swf_url=SWF_URL)
        swf_player = 'http://c.brightcove.com/services/viewer/federated_f9'
    
        rtmpVid = RTMPVideoURL(url=Rtmp, clip=Clip, swf_url = swf_player)
        return IndirectResponse(VideoClipObject, key=rtmpVid)
    
    #return Redirect(data['FLVURL'])